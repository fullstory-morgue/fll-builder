#!/bin/bash

install_linux_kernel() {
	local KZIP="$1"
	local KDIR=$(mktemp -p $FLL_BUILD_CHROOT -d kernel.XXXX)
	local KTYPE KDEBS KURL

	[[ $KZIP ]] || return 1

	case "$KZIP" in
		*kernel-*.zip)
			[[ -f $KZIP ]] && KTYPE="file" || KTYPE="url"
			;;
		*)
			echo "Unrecognised kernel option: $KZIP"
			return 1
			;;
	esac

	# use bash regexp to determine kernel version
	if [[ $KZIP =~ '.*/kernel-(.*).zip' ]]; then
		if [[ $DEBUG ]]; then
			for ((i=0; i<${#BASH_REMATCH[@]}; i++)); do
               			echo "\${BASH_REMATCH[$i]} => ${BASH_REMATCH[$i]}"
        		done
		fi
		KVERS=${BASH_REMATCH[1]}
		# package list needs to filter these packages out :(
		export KVERS
	fi

	# cannot pushd here, it breaks relative kernel paths
	case "$KTYPE" in
		"file")
			cp "$KZIP" "$KDIR"/kernel-"$KVERS".zip
			;;
		"url")
			wget -T3 "$KZIP" -O "$KDIR"/kernel-"$KVERS".zip
			;;
	esac

	pushd "$KDIR" >/dev/null
		unzip kernel-"$KVERS".zip
	popd >/dev/null

	chroot_install_debs_from_dir "$KDIR"

	chroot_exec rm -vf /lib/modules/"$KVERS"/build /lib/modules/"$KVERS"/source
	chroot_exec ln -vs linux-headers-"$KVERS" /usr/src/linux-"$KVERS"
	chroot_exec ln -vs /usr/src/linux-"$KVERS" /lib/modules/"$KVERS"/build
	chroot_exec ln -vs /usr/src/linux-"$KVERS" /lib/modules/"$KVERS"/source
	chroot_exec cp -vf /boot/config-"$KVERS" /usr/src/linux-"$KVERS"/.config
	chroot_exec rm -rf /usr/src/linux-"$KVERS"/Documentation
	chroot_exec ln -vs /usr/share/doc/linux-doc-"$KVERS"/Documentation \
		/usr/src/linux-"$KVERS"/Documentation
	chroot_exec ln -vs vmlinuz-"$KVERS" /boot/vmlinuz
	chroot_exec ln -vs initrd.img-"$KVERS" /boot/miniroot.gz
	
	# save kernel.zip if building source iso
	if [[ $FLL_BUILD_SOURCE_REL ]]; then
		# XXX: what about linux + modules source code?
		cp -v "$KDIR"/kernel-"$KVERS".zip "$FLL_BUILD_SOURCE"/kernel/kernel-"$KVERS".zip
	fi

	rm -vrf "$KDIR"
}
