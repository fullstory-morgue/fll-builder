#!/bin/bash
# Common functions for fll-build(8)

LANG=C
LC_ALL=C
export LANG LC_ALL

chroot_exec() {
	# adapted from live-package
	chroot "$FLL_BUILD_CHROOT" /usr/bin/env -i \
		SHELL="$SHELL" \
		HOME="/root" \
		PATH="/usr/sbin:/usr/bin:/sbin:/bin" \
		DEBIAN_FRONTEND="noninteractive" \
		DEBIAN_PRIORITY="critical" \
		DEBCONF_NOWARNINGS="yes" \
		$@
	
	return $?
}

copy_to_chroot() {
	local ORIGFILE="$1"
	local DESTFILE="${FLL_BUILD_CHROOT}${1}"
	
	if [[ -f "$DESTFILE" ]]; then
		mv -v "$DESTFILE" "$DESTFILE".orig
	fi

	cp -v "$ORIGFILE" "$DESTFILE"
}

remove_from_chroot() {
	local FILE="${FLL_BUILD_CHROOT}${1}"
	
	rm -vf "$FILE"
	
	if [[ -f "$FILE".orig ]]; then
		mv -v "$FILE".orig "$FILE"
	fi
}

create_chroot_policy() {
	# disable all init scripts as per /usr/share/doc/sysv-rc/README.policy-rc.d.gz.
	cat > $FLL_BUILD_CHROOT/usr/sbin/policy-rc.d \
<<EOF
#!/bin/sh

exit 101
EOF
	chmod 0755 $FLL_BUILD_CHROOT/usr/sbin/policy-rc.d
}

create_interfaces() {
	mkdir -p $FLL_BUILD_CHROOT/etc/network/
	cat > $FLL_BUILD_CHROOT/etc/network/interfaces \
<<EOF
# /etc/network/interfaces -- configuration file for ifup(8), ifdown(8)

# The loopback interface
# automatically added when upgrading
auto lo
iface lo inet loopback
EOF
}

create_debian_chroot() {
	cat > $FLL_BUILD_CHROOT/etc/debian_chroot \
<<EOF
$FLL_DISTRO_NAME-live
EOF
}

create_fstab() {
	cat > $FLL_BUILD_CHROOT/etc/fstab \
<<EOF
# /etc/fstab: static file system information.
#
# <file system>	<mount point>	<type>	<options>		<dump>	<pass>
EOF
}

create_sources_list() {
	local SOURCESLIST="$FLL_BUILD_CHROOT/etc/apt/sources.list"
	case $1 in
		working)
			: ${FLL_BUILD_DEBIANMIRROR:="http://ftp.debian.org/debian/"}
			: ${FLL_BUILD_SIDUXMIRROR:="http://sidux.com/debian/"}
			cat > "$SOURCESLIST" \
<<EOF
deb $FLL_BUILD_DEBIANMIRROR sid main
#deb-src $FLL_BUILD_DEBIANMIRROR sid main

deb $FLL_BUILD_SIDUXMIRROR sid main fix.main
#deb-src $FLL_BUILD_SIDUXMIRROR sid main fix.main
EOF
			;;
		final)
			cat > "$SOURCESLIST" \
<<EOF
deb http://ftp.debian.org/debian/ sid main
deb-src http://ftp.debian.org/debian/ sid main

deb http://ftp.debian.org/debian/ testing main
deb-src http://ftp.debian.org/debian/ testing main

deb http://sidux.com/debian/ sid main fix.main
deb-src http://sidux.com/debian/ sid main fix.main
EOF
			;;
	esac
}

create_sudoers() {
	local SUDOERS="$FLL_BUILD_CHROOT/etc/sudoers"
	[[ -f "$SUDOERS" ]] || return 1
	cat >> "$SUDOERS" \
<<EOF

# WARNING: This allows the unprivileged $FLL_LIVE_USER user to start commands as root
# WARNING: This is totally insecure and (almost) makes $FLL_LIVE_USER a second root account.
# WARNING: Never allow external access to the $FLL_LIVE_USER user!!!
$FLL_LIVE_USER	ALL=NOPASSWD: ALL
EOF
}

fixup_linux_kernel() {
	local VER=$1

	[[ $VER ]] || return 1

	chroot_exec rm -vf /lib/modules/$VER/build /lib/modules/$VER/source
	chroot_exec ln -vs linux-headers-$VER /usr/src/linux-$VER
	chroot_exec ln -vs /usr/src/linux-$VER /lib/modules/$VER/build
	chroot_exec ln -vs /usr/src/linux-$VER /lib/modules/$VER/source
	chroot_exec cp -vf /boot/config-$VER /usr/src/linux-$VER/.config
	chroot_exec rm -rf /usr/src/linux-$VER/Documentation
	chroot_exec ln -vs /usr/share/doc/linux-doc-$VER/Documentation \
		/usr/src/linux-$VER/Documentation
}

install_linux_kernel() {
	local KZIP=$1 KTYPE KDIR KDEBS

	[[ $KZIP ]] || return 1

	case "$KZIP" in
		*.zip)
			if [[ -f $KZIP ]]; then
				KTYPE="file"
			else
				KTYPE="url"
			fi
			;;
		*)
			echo "Unrecognised kernel option: $KZIP"
			return 1
			;;
	esac

	KDIR=$(mktemp -p $FLL_BUILD_CHROOT -d kernel.XXXX)

	pushd "$KDIR" >/dev/null
		case "$KTYPE" in
			"file")
				cp "$KZIP" kernel.zip
				;;
			"url")
				wget -N -T10 "$KZIP" -O kernel.zip
				;;
		esac

		if unzip kernel.zip; then
			find . -maxdepth 1 -type f ! -name '*.deb' -exec rm -vf {} \;
			# XXX: contrib in kernel.zip ?
			rm -f rt61*.deb
			apt-ftparchive packages . > Packages
		fi
	
	popd >/dev/null

	if [[ -f $KDIR/Packages ]]; then
		KDEBS=$(sed -n 's/^Package: \(.\+\)/\1/p' $KDIR/Packages)
		[[ $KDEBS ]] || return 1
	fi

	echo "deb file://${KDIR//$FLL_BUILD_CHROOT/} ./" >> $FLL_BUILD_CHROOT/etc/apt/sources.list
	
	chroot_exec apt-get update
	chroot_exec apt-get --allow-unauthenticated --assume-yes install "$KDEBS"

	rm -rf "$KDIR"
}

make_compressed_image() {
	mksquashfs "$FLL_BUILD_CHROOT" "$FLL_BUILD_RESULT/$FLL_IMAGE_LOCATION" -info 
}

make_iso_root() {
	# copy templates of any extras to keep in the root of the iso (documentation/autorun scripts etc)
	cp -a $FLL_BUILD_BASE/usr/share/fll-builder/templates/common/* $FLL_BUILD_RESULT/
	# this currently contains sidux offline faq
	# XXX how will the offline faq be distributed? Would it be suitable to include in this package?
	# XXX turn this into a variable
	cp -a $FLL_BUILD_BASE/usr/share/fll-builder/templates/sidux/* $FLL_BUILD_RESULT/

	# copy grub info - adapted from bfree's dopreimage fn
	# XXX consider changing this to mv $FLL_BUILD_CHROOT/boot ala live-package
	cp -a $FLL_BUILD_CHROOT/boot $FLL_BUILD_RESULT/
	cp -a $FLL_BUILD_CHROOT/usr/lib/grub/i386-pc/* $FLL_BUILD_RESULT/boot/grub/
}

make_fll_iso() {
	: ${FLL_BUILD_ISO_OUPUT:="$FLL_BUILD_AREA/../$FLL_MEDIA_NAME"}

	genisoimage \
		-pad -l -r -J -v -V \"$FLL_DISTRO_NAME\" -no-emul-boot -boot-load-size 4 \
		-boot-info-table -b boot/grub/iso9660_stage1_5 -c boot/grub/boot.cat -hide-rr-moved \
		-o "$FLL_BUILD_ISO_OUTPUT" "$FLL_BUILD_RESULT"
}

virtfs() {
	local ACTION=$1 PROC=$2

	[[ $ACTION && -d $PROC ]] || return 1

	case "$ACTION" in
		mount)
			mount  procfll -t proc "$PROC"
			;;
		umount)
			grep -q "$PROC" /proc/mounts || return 0
			umount "$PROC"
			;;
	esac

	return $?
}

nuke_buildarea() {
	[[ -d $FLL_BUILD_AREA ]] || return 0

	if virtfs umount "$FLL_BUILD_CHROOT/proc"; then
		if [[ $FLL_BUILD_PRESERVE_CHROOT ]]; then
			echo "Chroot preserved at $FLL_BUILD_AREA"
			return 0
		fi
		# adpated from pbuilder
		find "$FLL_BUILD_AREA" -xdev \( \! -type d \) -print0 | xargs -0 rm -f
  		find "$FLL_BUILD_AREA" -xdev -depth -type d -print0 | xargs -0 rmdir
	else
		echo "Error umounting virtual filesystems"
		echo "You must manually cleanup up $FLL_BUILD_AREA"
	fi
}
