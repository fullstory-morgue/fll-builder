#!/bin/bash
# Common functions for fll-build(8)

LANG=C
LC_ALL=C
export LANG LC_ALL

chroot_exec() {
	# adapted from live-package
	chroot "$FLL_BUILD_CHROOT" /usr/bin/env -i \
		SHELL="$SHELL" \
		HOME="/root" \
		PATH="/usr/sbin:/usr/bin:/sbin:/bin" \
		DEBIAN_FRONTEND="noninteractive" \
		DEBIAN_PRIORITY="critical" \
		DEBCONF_NOWARNINGS="yes" \
		$@
	
	return $?
}

copy_to_chroot() {
	local ORIGFILE="$1"
	local DESTFILE="${FLL_BUILD_CHROOT}${1}"
	
	if [[ -f "$DESTFILE" ]]; then
		mv -v "$DESTFILE" "$DESTFILE".orig
	fi

	cp -v "$ORIGFILE" "$DESTFILE"
}

remove_from_chroot() {
	local OBJ="${FLL_BUILD_CHROOT}${1}"

	rm -vf $OBJ
	
	if [[ -e "$OBJ".orig ]]; then
		mv -v "$OBJ".orig "$OBJ"
	fi
}

exists_in_chroot() {
	local OBJ="${FLL_BUILD_CHROOT}${1}"

	if [[ -e $OBJ ]]; then
		return 0
	fi

	return 1
}

cat_file() {
	local FILE="$1" DEST="${FLL_BUILD_CHROOT}${2}"

	[[ $1 && $2 ]] || return 1

	echo "Creating \`$FILE' at $DEST"

	case "$FILE" in

		apt_conf)
			if [[ $FLL_HTTP_PROXY ]]; then
				cat > "$DEST" \
<<EOF
Acquire::http::Proxy "$FLL_HTTP_PROXY";
EOF
			elif [[ $FLL_FTP_PROXY ]]; then
				cat > "$DEST" \
<<EOF
Acquire::ftp::Proxy "$FLL_FTP_PROXY";
EOF
			fi
			;;

		apt_sources)
			cat > "$DEST" \
<<EOF
deb http://ftp.debian.org/debian/ sid main
deb-src http://ftp.debian.org/debian/ sid main

deb http://ftp.debian.org/debian/ testing main
deb-src http://ftp.debian.org/debian/ testing main

deb http://sidux.com/debian/ sid main fix.main
deb-src http://sidux.com/debian/ sid main fix.main
EOF
			;;

		apt_sources_tmp)
			cat > "$DEST" \
<<EOF
deb $FLL_BUILD_DEBIANMIRROR sid main
#deb-src $FLL_BUILD_DEBIANMIRROR sid main

deb $FLL_BUILD_FLLMIRROR sid main fix.main
#deb-src $FLL_BUILD_FLLMIRROR sid main fix.main
EOF
			;;

		chroot_policy)
			# disable all init scripts
			# /usr/share/doc/sysv-rc/README.policy-rc.d.gz
			cat > "$DEST" \
<<EOF
#!/bin/sh
exit 101
EOF
			chmod 0755 "$DEST"
			;;

		debian_chroot)
			cat > "$DEST" \
<<EOF
$FLL_DISTRO_NAME-live
EOF
			;;

		fstab)
			cat > "$DEST" \
<<EOF
# /etc/fstab: static file system information.
#
# <file system>	<mount point>	<type>	<options>		<dump>	<pass>
EOF
			;;

		hosts)
			cat > "$DEST" \
<<EOF
127.0.0.1	localhost
127.0.0.1	$FLL_DISTRO_NAME

# The following lines are desirable for IPv6 capable hosts
# (added automatically by netbase upgrade)

::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
ff02::3 ip6-allhosts
EOF
			;;

		interfaces)
			cat > "$DEST" \
<<EOF
# /etc/network/interfaces -- configuration file for ifup(8), ifdown(8)

# The loopback interface
# automatically added when upgrading
auto lo
iface lo inet loopback
EOF
			;;

		kernelimg)
			cat > "$DEST" \
<<EOF
do_symlinks = NO
do_bootloader = NO
warn_initrd = NO
ramdisk = mklive-initrd
EOF
			;;

		sudoers)
			[[ -f "$DEST" ]] || return 1
			# append
			cat >> "$DEST" \
<<EOF

# WARNING: This allows the unprivileged $FLL_LIVE_USER user to start commands as root
# WARNING: This is totally insecure and (almost) makes $FLL_LIVE_USER a second root account.
# WARNING: Never allow external access to the $FLL_LIVE_USER user!!!
$FLL_LIVE_USER	ALL=NOPASSWD: ALL
EOF
			
			chmod 0440 "$DEST"
			;;

esac
}

install_linux_kernel() {
	local KZIP=$1 KTYPE KDIR KDEBS

	[[ $KZIP ]] || return 1

	case "$KZIP" in
		*.zip)
			if [[ -f $KZIP ]]; then
				KTYPE="file"
			else
				KTYPE="url"
			fi
			;;
		*)
			echo "Unrecognised kernel option: $KZIP"
			return 1
			;;
	esac

	KDIR=$(mktemp -p $FLL_BUILD_CHROOT -d kernel.XXXX)

	# cannot pushd here, it breaks relative kernel paths
	case "$KTYPE" in
		"file")
			cp "$KZIP" "$KDIR"/kernel.zip
			;;
		"url")
			wget -N -T10 "$KZIP" -O "$KDIR"/kernel.zip
			;;
	esac

	pushd "$KDIR" >/dev/null
		if unzip kernel.zip; then
			find . -maxdepth 1 -type f ! -name '*.deb' -exec rm -vf {} \;
			apt-ftparchive packages . > Packages
		fi
	
	popd >/dev/null

	if [[ -f $KDIR/Packages ]]; then
		KDEBS=$(sed -n 's/^Package: \(.\+\)/\1/p' $KDIR/Packages)
		[[ $KDEBS ]] || return 1
	fi

	echo "deb file://${KDIR//$FLL_BUILD_CHROOT/} ./" >> "$FLL_BUILD_CHROOT"/etc/apt/sources.list
	
	chroot_exec apt-get update
	chroot_exec apt-get --allow-unauthenticated --assume-yes install "$KDEBS"

	for kernel in "$FLL_BUILD_CHROOT"/boot/vmlinuz-*; do
		[[ -f $kernel ]] || continue
		kernel=$(sed 's/.*vmlinuz-//' <<< $kernel)
		# fix up kernel links
		chroot_exec rm -vf /lib/modules/$kernel/build /lib/modules/$kernel/source
		chroot_exec ln -vs linux-headers-$kernel /usr/src/linux-$kernel
		chroot_exec ln -vs /usr/src/linux-$kernel /lib/modules/$kernel/build
		chroot_exec ln -vs /usr/src/linux-$kernel /lib/modules/$kernel/source
		chroot_exec cp -vf /boot/config-$kernel /usr/src/linux-$kernel/.config
		chroot_exec rm -rf /usr/src/linux-$kernel/Documentation
		chroot_exec ln -vs /usr/share/doc/linux-doc-$kernel/Documentation \
			/usr/src/linux-$kernel/Documentation
		chroot_exec ln -vs vmlinuz-$kernel /boot/vmlinuz
		chroot_exec ln -vs initrd.img-$kernel /boot/miniroot.gz
	done

	rm -rf "$KDIR"
}

make_compressed_image() {
	local SQUASHFSEXCLUDEFILE=$(mktemp -p $FLL_BUILD_AREA squashfs-exclude.XXXXX)
	# XXX: make room for a sort list and exclude list

	cat > "$SQUASHFSEXCLUDEFILE" \
<<EOF
$FLL_BUILD_CHROOT/.*
$FLL_BUILD_CHROOT/boot/initrd*
$FLL_BUILD_CHROOT/boot/miniroot.gz
$FLL_BUILD_CHROOT/home/*
$FLL_BUILD_CHROOT/root/*
$FLL_BUILD_CHROOT/root/.*
$FLL_BUILD_CHROOT/tmp/*
$FLL_BUILD_CHROOT/var/tmp/*
EOF

	# -info is a bit too verbose
	local MKSQUASHFSOPTS="-ef $SQUASHFSEXCLUDEFILE"

	pushd "$FLL_BUILD_CHROOT" >/dev/null
		mksquashfs . "$FLL_BUILD_RESULT"/"$FLL_IMAGE_LOCATION" $MKSQUASHFSOPTS
	popd >/dev/null
}

make_fll_iso() {
	local ISOSORTLIST=$(mktemp -p $FLL_BUILD_AREA sortlist.XXXXX)

	cat > "$ISOSORTLIST" \
<<EOF
$FLL_BUILD_RESULT/boot/grub/* 111111
$FLL_BUILD_RESULT/boot/* 111110
${FLL_BUILD_RESULT}${FLL_MOUNTPOINT} 100001
EOF

	# set default ISO name
	case $DEBOOTSTRAP_ARCH in
		i?86)
			FLL_ISO_NAME="$(tr a-z A-Z <<< ${FLL_DISTRO_NAME}-${FLL_DISTRO_VERSION}-${FLL_DISTRO_CODENAME}-${PACKAGE_TIMESTAMP}\.ISO)"
			;;
		amd64|x86_64)
			FLL_ISO_NAME="$(tr a-z A-Z <<< ${FLL_DISTRO_NAME}64-${FLL_DISTRO_VERSION}-${FLL_DISTRO_CODENAME}-${PACKAGE_TIMESTAMP}\.ISO)"
			;;
		*)
			FLL_ISO_NAME="$(tr a-z A-Z <<< ${FLL_DISTRO_NAME}-${DEBOOTSTRAP_ARCH}-${FLL_DISTRO_VERSION}-${FLL_DISTRO_CODENAME}-${PACKAGE_TIMESTAMP}\.ISO)"
			;;
	esac

	# make the iso
	genisoimage -v -pad -l -r -J \
		-V "$FLL_DISTRO_NAME_UC" \
		-A "$FLL_DISTRO_NAME_UC LIVE LINUX CD" \
		-no-emul-boot -boot-load-size 4 -boot-info-table \
		-b boot/grub/iso9660_stage1_5 -c boot/grub/boot.cat \
		-hide-rr-moved \
		-sort "$ISOSORTLIST" \
		-o "$FLL_BUILD_ISO_OUTPUT"/"$FLL_ISO_NAME" \
		"$FLL_BUILD_RESULT"
	
	md5sum -b "$FLL_BUILD_ISO_OUTPUT"/"$FLL_ISO_NAME" > \
		"$FLL_BUILD_ISO_OUTPUT"/"$FLL_ISO_NAME".MD5
	
	if [[ $FLL_BUILD_OUTPUT_UID != 0 ]]; then
		chown "$FLL_BUILD_OUTPUT_UID":"$FLL_BUILD_OUTPUT_UID" \
			"$FLL_BUILD_ISO_OUTPUT"/"$FLL_ISO_NAME"*
	fi
}

virtfs() {
	local ACTION="$1" PROC="$FLL_BUILD_CHROOT"/proc

	[[ $ACTION && $PROC ]] || return 1
	[[ -d $PROC ]] || return 0

	case "$ACTION" in
		mount)
			mount  procfll -t proc "$PROC"
			;;
		umount)
			grep -q "$PROC" /proc/mounts || return 0
			umount "$PROC"
			;;
	esac

	return $?
}

nuke_buildarea() {
	[[ -d $FLL_BUILD_AREA ]] || return 0

	if virtfs umount; then
		if [[ $FLL_BUILD_PRESERVE_CHROOT ]]; then
			echo "Chroot preserved at $FLL_BUILD_AREA"
			return 0
		fi
		# adpated from pbuilder
		find "$FLL_BUILD_AREA" -xdev \( \! -type d \) -print0 | xargs -0 rm -f
  		find "$FLL_BUILD_AREA" -xdev -depth -type d -print0 | xargs -0 rmdir
		return 0
	else
		echo "Error umounting virtual filesystems"
		echo "You must manually cleanup up $FLL_BUILD_AREA"
		return 1
	fi
}
