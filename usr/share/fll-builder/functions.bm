#!/bin/bash
# Common functions for fll-build(8)

LANG=C
LC_ALL=C
export LANG LC_ALL

proc() {
	local PROC="$FLL_BUILD_CHROOT"/proc
	local NAME="proc-fll"
	
	case $1 in
		mount)
			mount "$NAME" -t proc "$PROC"
			;;
		umount)
			grep -q "$PROC" /proc/mounts || return 0
			umount "$PROC"
			;;
	esac

	return $?
}

nuke_buildarea() {
	[[ -d $FLL_BUILD_AREA ]] || return 0

	proc umount

	[[ $FLL_BUILD_KEEPCHROOT ]] && return 0
	
	# adpated from pbuilder
	find "$FLL_BUILD_AREA" -xdev \( \! -type d \) -print0 | xargs -0 rm -f
  	find "$FLL_BUILD_AREA" -xdev -depth -type d -print0 | ( xargs -0 rmdir || true )
}

cdebootstrap_chroot() {
	local MIRROR=${DEBOOTSTRAP_MIRROR:="http://ftp.debian.org/debian/"}
	local FLAVOUR=${DEBOOTSTRAP_FLAVOUR:="minimal"}
	local ARCH=${DEBOOTSTRAP_ARCH:="$DPKG_ARCH"}

	cdebootstrap --arch="$ARCH" --flavour="$FLAVOUR" sid "$FLL_BUILD_CHROOT" "$MIRROR"

	return $?
}

chroot_exec() {
	# adapted from live-package
	chroot "$FLL_BUILD_CHROOT" /usr/bin/env -i \
		SHELL="$SHELL" \
		HOME="/root" \
		PATH="/usr/sbin:/usr/bin:/sbin:/bin" \
		DEBIAN_FRONTEND="noninteractive" \
		DEBIAN_PRIORITY="critical" \
		DEBCONF_NOWARNINGS="yes" \
		$@
	
	return $?
}

copy_to_chroot() {
	local ORIGFILE="$1"
	local DESTFILE="${FLL_BUILD_CHROOT}${1}"
	
	[[ -f "$DESTFILE" ]] && mv -v "$DESTFILE" "$DESTFILE".orig

	cp -v "$ORIGFILE" "$DESTFILE"
}

remove_from_chroot() {
	local FILE="${FLL_BUILD_CHROOT}${1}"
	
	rm -vf "$FILE"
	
	[[ -f "$FILE".orig ]] && mv -v "$FILE".orig "$FILE"
}

create_chroot_policy() {
	# disable all init scripts as per /usr/share/doc/sysv-rc/README.policy-rc.d.gz.
	cat > "$FLL_BUILD_CHROOT"/usr/sbin/policy-rc.d \
<<EOF
#!/bin/sh

exit 101
EOF
	chmod 0755 "$FLL_BUILD_CHROOT"/usr/sbin/policy-rc.d
}

create_interfaces() {
	mkdir -p "$FLL_BUILD_CHROOT"/etc/network/
	cat > "$FLL_BUILD_CHROOT"/etc/network/interfaces \
<<EOF
# /etc/network/interfaces -- configuration file for ifup(8), ifdown(8)

# The loopback interface
# automatically added when upgrading
auto lo
iface lo inet loopback
EOF
}

create_debian_chroot() {
	cat > "$FLL_BUILD_CHROOT"/etc/debian_chroot \
<<EOF
$FLL_DISTRO_NAME-live
EOF
}

create_fstab() {
	cat > "$FLL_BUILD_CHROOT"/etc/fstab \
<<EOF
# /etc/fstab: static file system information.
#
# <file system>	<mount point>	<type>	<options>		<dump>	<pass>
EOF
}

create_sources_list() {
	local DEBIANMIRROR=${FLL_BUILD_DEBIANMIRROR:="http://ftp.debian.org/debian/"}
	local SIDUXMIRROR=${FLL_BUILD_SIDUXMIRROR:="http://sidux.com/debian/"}
	case $1 in
		working)
			cat > "${FLL_BUILD_CHROOT}"/etc/apt/sources.list \
<<EOF
deb $DEBIANMIRROR sid main
deb-src $DEBIANMIRROR sid main

deb $SIDUXMIRROR sid main fix.main
deb-src $SIDUXMIRROR sid main fix.main
EOF
			;;
		final)
			cat > "${FLL_BUILD_CHROOT}"/etc/apt/sources.list \
<<EOF
deb http://ftp.debian.org/debian/ sid main
deb-src http://ftp.debian.org/debian/ sid main

deb http://sidux.com/debian/ sid main fix.main
deb-src http://sidux.com/debian/ sid main fix.main
EOF
			;;
	esac
}

create_sudoers() {
	cat > "${FLL_BUILD_CHROOT}"/etc/sudoers \
<<EOF
# sudoers file.
#
# This file MUST be edited with the "visudo" command as root.
#
# See the man page for details on how to write a sudoers file.
#

# Host alias specification

# User alias specification

# Cmnd alias specification

# User privilege specification
root	ALL=(ALL) ALL

# SIDUX WARNING: This allows the unprivileged sidux user to start commands as root
# SIDUX WARNING: This is totally insecure and (almost) makes sidux a second root account.
# SIDUX WARNING: Never allow external access to the sidux user!!!
$FLL_LIVE_USER	ALL=NOPASSWD: ALL
EOF
}
