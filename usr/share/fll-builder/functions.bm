#!/bin/bash
# Common functions for fll-build(8)

strap_chroot() {
	local MIRROR=${DEBOOTSTRAP_MIRROR:="http://ftp.debian.org/debian/"}
	local FLAVOUR=${DEBOOTSTRAP_FLAVOUR:="minimal"}
	local ARCH=${DEBOOTSTRAP_ARCH:="$DPKG_ARCH"}

	cdebootstrap --arch="$ARCH" --flavour="$FLAVOUR" sid "$FLL_BUILD_CHROOT" "$MIRROR"

	return $?
}

chroot_exec() {
	# adapted from live-package
	chroot "$FLL_BUILD_CHROOT" /usr/bin/env -i \
		SHELL="$SHELL" \
		HOME="/root" \
		PATH="/usr/sbin:/usr/bin:/sbin:/bin" \
		DEBIAN_FRONTEND="noninteractive" \
		DEBIAN_PRIORITY="critical" \
		DEBCONF_NOWARNINGS="yes" \
		$@
	
	return $?
}

copy_to_chroot() {
	local ORIGFILE="$1"
	local DESTFILE="${FLL_BUILD_CHROOT}${1}"
	
	if [[ -f $DESTFILE ]]; then
		mv $DESTFILE $DESTFILE.orig
	fi

	cp -v $ORIGFILE $DESTFILE
}

revert_copy_to_chroot() {
	local FILE="${FLL_BUILD_CHROOT}${1}"
	if [[ -f ${FILE}.orig ]]; then
		rm -vf ${FILE}
		mv -v ${FILE}.orig ${FILE}
	fi
}

copy_template_to_chroot() {
	local ORIGFILE="$FLL_BUILD_TEMPLATEDIR"/"$1"
	local DESTFILE="${FLL_BUILD_CHROOT}${2}"
	
	if [[ -f $DESTFILE ]]; then
		rm -vf $DESTFILE
	fi

	if [[ ! -d ${DESTFILE%/*} ]]; then
		mkdir -vp ${DESTFILE%/*}
	fi

	cp -v $ORIGFILE $DESTFILE
}

patch_debian_chroot() {
	case $1 in
		apply)
			echo "$FLL_DISTRO_NAME-live" > "$FLL_BUILD_CHROOT"/etc/debian_chroot
			;;
		reverse)
			rm -vf "$FLL_BUILD_CHROOT"/etc/debian_chroot
			;;
	esac
}

patch_policy_rcd() {
	case $1 in
		apply)
			copy_template_to_chroot policy-rc.d /usr/sbin/policy-rc.d
			chmod 0755 "$FLL_BUILD_CHROOT"/usr/sbin/policy-rc.d
			;;
		reverse)
			rm -vf "$FLL_BUILD_CHROOT"/usr/sbin/policy-rc.d
			;;
	esac
}

patch_network() {
	case $1 in
		apply)
			copy_to_chroot /etc/hosts
			copy_to_chroot /etc/resolv.conf
			;;
		reverse)
			revert_copy_to_chroot /etc/hosts
			revert_copy_to_chroot /etc/resolv.conf
			;;
	esac
}

mount_proc() {
	mount fllchrootproc -t proc "$FLL_BUILD_CHROOT"/proc
}

umount_proc() {
	if grep -q "$FLL_BUILD_CHROOT"/proc /proc/mounts; then
		umount "$FLL_BUILD_CHROOT"/proc
	fi
}

nuke_buildarea() {
	[[ -d $FLL_BUILD_AREA ]] || return 0

	umount_proc

	# adpated from pbuilder
	find "$FLL_BUILD_AREA" -xdev \( \! -type d \) -print0 | \
		xargs -0 rm -f
  	find "$FLL_BUILD_AREA" -xdev -depth -type d -print0 | \
		(xargs -0 rmdir || true)
}


