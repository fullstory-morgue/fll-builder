<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<title>Sidux Manuals - Other Installaion Options</title>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<style type="text/css">@import url("../lib/css-js/content.css");</style>
	<style type="text/css">@import url("../lib/css-js/menu.css");</style>
	<script type="text/javascript" src="../lib/css-js/menu2.js"></script>
</head>
<body id="hd">
<div id="menu">
<!-- menu starts here -->
<img src="../lib/sidux-logo.png" alt="logo" id="menu-header" />
	<ul id="top-list">
		<li><a href="http://sidux.com/">Back to main sidux menu</a></li>
	</ul>
<!--<h2>Welcome to the Official Sidux Manual version sidux-manual-static-proof-22</h2>-->
	<ul>
<!-- menu last updated by bluewater 05/01/2007 1300hrs ADEST 05/01/2007 0200hrs UTC -->
		<li  onmouseover="showHide( 1 );" onmouseout="startTime();" ><a href="welcome.htm">Welcome to Sidux</a>
			<ul class="sub-menu" id="sm1">
				<li><a href="welcome.htm#welcome-gen">Official Manual</a></li>
				<li><a href="welcome.htm#how-to">How to use this manual</a></li>
				<li><a href="help.htm#for-wiki">Where to get Help</a></li>
				<li><a href="credits.htm#cred-team">Credits</a></li>
			</ul>
		</li>
		<li  onmouseover="showHide( 2 );" onmouseout="startTime();" ><a href="cd-content.htm">CD Contents</a>
			<ul class="sub-menu" id="sm2">
				<li><a href="cd-content.htm#cd-content">CD Contents</a></li>
			</ul>
		</li>
		<li  onmouseover="showHide( 6 );" onmouseout="startTime();" ><a href="cd-dl-burning.htm">CD Downloading and Burning</a>
			<ul class="sub-menu" id="sm6">
				<li><a href="cd-dl-burning.htm#download-sidux">CD Downloading and Burning</a></li>
				<li><a href="cd-dl-burning.htm#md5">md5 Checksum</a></li>
				<li><a href="cd-dl-burning.htm#burn-nero">Burning in Windows</a></li>
				<li><a href="cd-dl-burning.htm#burn-linux">Burning in Linux</a></li>
				<li><a href="cd-dl-burning.htm#xdelta">xdelta Patching</a></li>
				<li><a href="cd-no-gui-burn.htm">Burning without a GUI</a></li>
			</ul>
		</li>
		<li  onmouseover="showHide( 4 );" onmouseout="startTime();" ><a href="live-mode.htm">Live Mode</a>
			<ul class="sub-menu" id="sm4">
				<li><a href="live-mode.htm#rootpw">Root-password on the sidux-LiveCD?</a></li>
				<li><a href="live-mode.htm#unionfs">Unionfs - Install software in live mode</a></li>
				<li><a href="live-mode.htm#ntfs-3g">Writing on NTFS-partitions with ntfs-3g</a></li>
			</ul>
		</li>
		<li  onmouseover="showHide( 9 );" onmouseout="startTime();" ><a href="term-konsole.htm">The Terminal/Konsole</a>
			<ul class="sub-menu" id="sm9">
				<li><a href="term-konsole.htm#konsole"> Terminal/Konsole</a></li>
				<li><a href="term-konsole.htm#cli-help">Command Line Help</a></li>
			</ul>
		</li>
		<li  onmouseover="showHide( 7 );" onmouseout="startTime();" ><a href="cheatcodes.htm">CheatCodes</a>
			<ul class="sub-menu" id="sm7">
				<li><a href="cheatcodes.htm#cheatcodes">Cheatcodes</a></li>
				<li><a href="cheatcodes-vga.htm#vga">VGA Codes</a></li>
			</ul>
		</li>
		<li  onmouseover="showHide( 5 );" onmouseout="startTime();" ><a href="part-gparted.htm">Partitioning Your Hard Drive</a>
			<ul class="sub-menu" id="sm5">
				<li><a href="part-gparted.htm#partition">Paritioning your HD using GParted</a></li>
				<li><a href="part-gparted.htm#ntfs">NTFS partition Resizing using GParted</a></li>
				<li><a href="part-cfdisk.htm#disknames">Disk Naming</a></li>
				<li><a href="part-cfdisk.htm#partition">Partitioning  your HD using cfdisk</a></li>
				<li><a href="part-cfdisk.htm#formating">Formating partitions after partitioning with cfdisk</a></li>
				<li><a href="part-size-examp.htm#part-example">Partition Size Examples</a></li>
			</ul>
		</li>
		<li  onmouseover="showHide( 3 );" onmouseout="startTime();" ><a href="internet-connecting.htm">Internet and Networking</a>
			<ul class="sub-menu" id="sm3">
				<li><a href="ntp-server.htm#ntp-server">Timeserver Setup</a></li>
				<li><a href="samba.htm#configure">Configuring SAMBA (Windows)</a></li>
				<li><a href="samba.htm#setup">Samba-Server Setup</a></li>
				<li><a href="samba.htm#ssh-x">X Window Apps via SSH</a></li>
				<li><a href="samba.htm#ssh-f">GUI SSH with Konqueror</a></li>
				<li><a href="samba.htm#ssh-w">SSH X-Forwarding from Windows-PC</a></li>
				<li><a href="samba.htm#ssh-s">SSH Configuration</a></li>
				<li><a href="internet-connecting.htm#dial-mod">56k Modems</a></li>
				<li><a href="internet-connecting.htm#ndiswrapper">Activating Ndiswrapper</a></li>
				<li><a href="internet-connecting-wpa.htm#wpa">WIFI-wlan</a></li>
				<li><a href="internet-connecting.htm#internetsharing">Internet Sharing</a></li>
				<li><a href="internet-connecting.htm#netcardconfig">Getting Online</a></li>
			</ul>
		</li>

		<li  onmouseover="showHide( 8 );" onmouseout="startTime();" ><a href="hd-install.htm">Installation options</a>
			<ul class="sub-menu" id="sm8">
				<li><a href="hd-install.htm#Inst-prep">Install Preparation</a></li>
				<li><a href="hd-install.htm#Installation">Installing to your HD</a></li>
				<li><a href="hd-install.htm#first-hd-boot">First Boot Up</a></li>
				<li><a href="hd-install-opts.htm#perst-home">Persistent Home</a></li>
				<li><a href="hd-install-opts.htm#fromiso">Booting 'fromiso'</a></li>
				<li><a href="hd-install-opts.htm#usb-hd">Installing on a USB-HD</a></li>
				<li><a href="hd-install-opts.htm#qemu">Installing by QEMU</a></li>
			</ul>
		</li>
		<li  onmouseover="showHide( 10 );" onmouseout="startTime();" ><a href="hw-dev-hw-dri.htm">Graphic Cards, Hardware Devices and Drivers</a>
			<ul class="sub-menu" id="sm10">
				<li><a href="hw-dev-hw-dri.htm#nvidia-3d">nVidia 3d</a></li>
				<li><a href="hw-dev-hw-dri.htm#ati-3d">ATI 3d</a></li>
				<li><a href="hw-dev-hw-dri.htm#native-nv">Native nv</a></li>
				<li><a href="hw-dev-hw-dri.htm#native-ati">Native ati</a></li>
				<li><a href="hw-dev-hw-dri.htm#hd-ntfs3g">Writing to NTFS</a></li>
			</ul>
		</li>
		<li  onmouseover="showHide( 12 );" onmouseout="startTime();" ><a href="wm-kde.htm">Window Managers</a>
			<ul class="sub-menu" id="sm12">
				<li><a href="wm-kde.htm#desk-freeze">KDE Desktop Freezes</a></li>
				<li><a href="wm-kde.htm#kde-login">Cant login in KDE</a></li>
				<li><a href="wm-kde.htm#ch-th">Changing Themes</a></li>
			</ul>
		</li>
		<li  onmouseover="showHide( 11 );" onmouseout="startTime();" ><a href="sys-admin-apt.htm">System Administration</a>
			<ul class="sub-menu" id="sm11">
				<li><a href="sys-admin-apt.htm#apt-cook">APT-Guide Cookbook</a></li>
				<li><a href="sys-admin-apt.htm#apt-install">Installing a new package</a></li>
				<li><a href="sys-admin-apt.htm#apt-delete">Deleting a package</a></li>
				<li><a href="sys-admin-apt.htm#apt-upgrade">Upgrade of an Installed System</a></li>
				<li><a href="sys-admin-upgrade.htm#live-cd-upgrade">Upgrading using your Live-CD</a></li>
				<li><a href="sys-admin-kern-upg.htm#kern-upgrade">Uprading the kernel</a></li>
				<li><a href="sys-admin-rdiff.htm#rdiff">Backing Up with rdiff</a></li>
				<li><a href="vir-rkits.htm#virus-rkits">Virus and Rootkit Scanners</a></li>
				<li><a href="sys-admin.htm#start-services">Enabling services in sidux</a></li>
				<li><a href="sys-admin.htm#pw-lost">Lost root passwords</a></li>
				<li><a href="sys-admin.htm#mon-res">Screen Resolutions</a></li>
				<li><a href="sys-admin-grub-bootman2.htm#mbr-grub-boot">MBR Overwritten bootsector</a></li>
				<li><a href="sys-admin-grub-bootman2.htm#boot-grub-floppy">Creating a Boot-Floppy</a></li>
				<li><a href="sys-admin-grub-bootman2.htm#remove-grub">Removing grub from MBR</a></li>
				<li><a href="sys-admin-grub-bootman2.htm#what-is-grub">Grub the bootmanager</a></li>
			</ul>
		</li>
	</ul>
<!-- menu ends here -->

</div>
<div id="main-page">
	<div class="divider" id="perst-home">
		<h2>Setting a persistent home for the Live-CD</h2>
		<p  class="highlight-2">For normal use we recommend the ext3 file system. It is the default file system for sidux and well maintained.</p>

		<p>While using the sidux Live-CD you can set up a persistent $HOME directory to be able to save your config, user-data and additional installed programs.</p>
		
		<p>The most comon methods to boot-up the Live-CD are (but not limited to):<br />
		1) From the CD/DVD-drive, or <br />
		2) Boot up the ISO from the harddisk. <a href="hd-install-opts.htm#fromiso">"fromiso"</a></p>

		<p>This persistent $HOME can be installed to your PC hard drive or to your USB stick.</p>
		
		<p>First we need to activate <a href="live-mode.htm#unionfs">unionfs</a>, do this by using the unionfs cheatcode in the grubline by typing in:</p>

<pre>
unionfs
</pre>

		<p>Or, via the terminal/konsole if already booted up with:</p>

<pre>
$su
#fix-unionfs
</pre>

		<p>Now we boot from the Live-CD or the installed fromiso ISO and run the script to create the config-file (config.tbz) to save it on your USB stick or hard drive</p>
		<pre>sidux-Menu - Configuration - save configuration</pre>

		<p>Next we create the image-file for the home directory:</p>
		<pre>sidux-Menu - Configuration - install permanent sidux home directory</pre>
		
		<p>Make this big enough to hold software you may want to install in the future. Now we create an empty directory named unionfs in the /home of user sidex (/home/sidux) with konqueror, konsole or a tool of your choice.</p>

		<p>Then we boot the Live-CD or the fromiso-ISO and enter at the Grub-Bootscreen:</p>

		<pre>myconfig=scan home=scan unionrw=/home/sidux/unionfs</pre>

		<p>Now you are ready for installing new software to your new home-dir on your hard drive or stick.</p>

		<p>This is done in the usual way:</p>

<pre>#sux
#apt-get update
#apt-get install packagename</pre>

		<p>Booting up next time by entering myconfig=scan home=scan unionrw=/home/sidux/unionfs you can use your newly installed software.</p>
	</div>
	<div class="divider" id="fromiso">
		<h2>Booting with "fromiso"</h2>

		<p>With this cheatcode you can start from an iso out of a partition, which is much faster then from a CD (HD installations with "fromiso" only takes a fraction of time, some say less then 4 minutes, but with 6-8 minutes its still fast as lightning).</p>
		<p>This is of course much faster then from the CD- /DVD-drive and keeps the drive available. As an alternative you could use VMware as well.</p>

		<h6>Requirements:</h6>

		    <p>* a functioning grub (on a floppy, a HD-Installation or the Live-CD)<br />
		    * a sidux ISO Image e.g.: sidux.iso</p>


		<p>First we choose a place for the iso and 2 files we need, so we get shorter names. Therefore we create a base-directory: for example /dev/hda5, create the directory "sidux" and copy the iso into it:</p>

<pre># mkdir /media/hda5/sidux
# mv sidux.iso /media/hda5/sidux</pre>

		<p>now we move to that directory and mount the iso image:</p>

<pre># mkdir -p /mnt/test
# mount -t iso9660 -o loop,ro /media/hda5/sidux/sidux.iso /mnt/test</pre>

		<p>now we copy the files miniroot.gz and vmlinuz from the mounted iso image to our directory:</p>

<pre># cp /mnt/test/boot/vmlinuz /media/hda5/sidux/
# cp /mnt/test/boot/miniroot.gz /media/hda5/sidux/</pre>

		<p>Now we have to customize grub a bit, Therefore we edit the file /boot/grub/menu.lst and add the following lines:</p>

<pre>### ISO boot
title sidux 32bit from ISO
kernel (hd0,4)/sidux/vmlinuz ramdisk_size=100000 init=/etc/init fromiso=/sidux/*.iso noprompt noeject lang=en apm=power-off nomce quiet
initrd (hd0,4)/sidux/miniroot.gz</pre>

		<p>With next boot we have a new menu item in grub to start the iso image.</p>
	</div>

	<div class="divider" id="usb-hd">
		<h2>Installing sidux on a USB-Stick</h2>

		<p>To do an installation of sidux on a USB stick, compared to a normal HD-Install you need to take some extra steps.</p>

		<p>We start with a normal installation and choose the partition on the USB disk, where sidux is to be installed. (we speak of "sda1" here, but this is valid for any other partition on the USB disk).</p>

		<p>The following changes then have to be made as root:</p>

<pre># mount /dev/sda1 /media/sda1
# mount --bind /proc /media/sda1/proc
# chroot /media/sda1
# echo ehci-hcd >> /etc/mkinitrd/modules
# echo libusual >> /etc/mkinitrd/modules
# echo usb-storage >> /etc/mkinitrd/modules</pre>

		<p>In the file: etc/mkinitrd/mkinitrd.conf the value of the variable DELAY has to be set to 10 with the command:</p>

<pre># perl -pi -e 's/^(DELAY)=.*/\1=10/' /etc/mkinitrd/mkinitrd.conf
# perl -pi -e 's/mkext2fs/mkcramfs/' /etc/mkinitrd/mkinitrd.conf</pre>

		<p>We now create a new initrd image:</p>

<pre># mkinitrd -o /boot/initrd.img-$(uname -r)</pre>

		<p class="highlight-3">(Errors about missing modules can be ignored)</p>

		<p>The file /boot/grub/menu.lst must be adapted. Therefore we look at the file:</p>

<pre># cat /boot/grub/device.map
(hd0) /dev/hda
(hd1) /dev/sda</pre>

		<p>and issue the following commands to make a needed change in menu.lst and add the right harddisk:</p>

<pre># perl -pi -e 's/hd1/hdX/' /boot/grub/menu.lst
# perl -pi -e 's/hd0/hd1/' /boot/grub/menu.lst
# perl -pi -e 's/hdX/hd0/' /boot/grub/menu.lst
</pre>

		<p>Now you can boot from your USB installation.</p>

	<div class="divider" id="qemu">
		<h2>Installing sidux with QEMU</h2>

		<ul>
 			<li>1. create a harddiskimage for qemu</li>
 			<li>2. boot the iso with qemu</li>
 			<li>3. install on the image</li>

		</ul>

 			<h4>Creating the hard disk image</h4>

				<p>To run qemu you will probably need a hard disk image. This is a file which stores the contents of the emulated hard disk.</p>

				<p>Use the command:</p>
<pre>
qemu-img create -f qcow sidux.qcow 3G
</pre>
				<p>To create the image file named "sidux.qcow". The "3G" parameter specifies the size of the disk - in this case 3 GB. You can use suffix M for megabytes (for example "256M"). You shouldn't worry too much about the size of the disk - the qcow format compresses the image so that the empty space doesn't add up to the size of the file.</p>


			<h4>Installing the operating system</h4>

				<p>This is the first time you will need to start the emulator. One thing to keep in mind: when you click inside qemu window, the mouse pointer is grabbed. To release it press Ctrl+Alt.</p>

				<p>If you need to use a bootable floppy, run Qemu with:</p>
<pre>
qemu -floppy sidux.iso -net nic -net user -m 512 -boot d sidux.qcow
</pre>
				<p>If your CD-ROM is bootable, run Qemu with:</p>
<pre>
qemu -cdrom sidux.iso -net nic -net user -m 512 -boot d sidux.qcow
</pre>
				<p>Now install sidux as if you were going to install it on a real HD</p>


			<h4>Running the system</h4>

				<p>To run the system simply type:</p>
<pre>
qemu [hd_image]
</pre>
				<p>A good idea is to use overlay images. This way you can create hard disk image once and tell Qemu to store changes in external file. You get rid of all the instability, because it is so easy to revert to previous system state.</p>

				<p>To create an overlay image, type:</p>
<pre>
qemu-img create -b [[base''image]] -f qcow [[overlay''image]]
</pre>
				<p>Substitute the hard disk image for base_image (in our case win.qcow). After that you can run qemu with:</p>
<pre>
qemu [overlay_image]
</pre>
				<p>The original image will be left untouched. One hitch, the base image cannot be renamed or moved, the overlay remembers the base's full path.</p>


			<h4>Using any real partition as the single primary partition of a hard disk image</h4>

				<p>Sometimes, you may wish to use one of your system partition from within qemu (for instance, if you wish booting both your real machine or qemu using a given partition as root). You can do this using software RAID in linear mode (you need the linear.ko kernel driver) and a loopback device: the trick is to dynamically prepend a master boot record (MBR) to the real partition you mish to embed in a qemu raw disk image.</p>

				<p>Suppose you have a plain, unmounted /dev/hdaN partition with some filesystem on it you wish to make part of a qemu disk image. First, you create some small file to hold the MBR:</p>
<pre>
dd if=/dev/zero of=/path/to/mbr count=32
</pre>
				<p>Here, a 16 KB (32 * 512 bytes) file is created. It is important not to make it too small (even if the MBR only needs a single 512 bytes block), since the smaller it will be, the smaller the chunk size of the softwaire RAID device will have to be, which could have an impact on performance. Then, you setup a loopback device to the MBR file:</p>
<pre>
losetup -f /path/to/mbr
</pre>
				<p>Let's assume the resulting device is /dev/loop0, because we woudn't already have been using other loopbacks. Next step is to create the "merged" MBR + /dev/hdaN disk image using software RAID:</p>
<pre>
 modprobe linear
 mdadm --build --verbose /dev/md0 --chunk=16 --level=linear --raid-devices=2 /dev/loop0 /dev/hdaN
</pre>
				<p>The resulting /dev/md0 is what you will use as a qemu raw disk image (don't forget to set the permissions so that the emulator can access it). The last (and somewhat tricky) step is to set the disk configuration (disk geometry and partitions table) so that the primary partition start point in the MBR matches the one of /dev/hdaN inside /dev/md0 (an offset of exacly 16 * 512 = 16384 bytes in this example). Do this using fdisk on the host machine, not in the emulator: the default raw disc detection routine from qemu often results in non kilobyte-roundable offsets (such as 31.5 KB, as in the previous section) that cannot be managed by the software RAID code. Hence, from the the host:</p>
<pre>
 fdisk /dev/md0
</pre>
				<p>There, create a single primary partition corresponding to /dev/hdaN, and play with the 's'ector command from the 'x'pert menu until the first cylinder (where the first partition starts), matches to the size of the MBR. Finally, 'w'rite the result to the file: you are done. You know have a partition you can mount directly from your host, as well as part of a qemu disk image:</p>
<pre>
 qemu -hdc /dev/md0 [...]
</pre>
				<p>You can of course safely set any bootloader on this disk image using qemu, provided the original /boot/hdaN partition contains the necessary tools.</p>



			<h4>Using the QEMU Accelerator Module</h4>

				<p>The developers of qemu have created an optional kernel module to accelerate qemu to sometimes near native levels. This should be loaded with the option</p>
<pre>
major=0
</pre>
				<p>to automate the creation of the required /dev/kqemu device. The following command</p>
<pre>
echo "options kqemu major=0" >> /etc/modprobe.conf
</pre>
				<p>This will amend modprobe.conf to ensure that the module option is added every time the module is loaded.</p>

<pre>
qemu [...] -kernel-kqemu
</pre>
				<p>This enables full virtualization and thus improves speed considerably.</p>

			<h4>To activate qemu:</h4>
<pre>
qemu -cdrom /tmp/pkg/sidux-debug.iso -net nic -net user -m 512
</pre>
		<p><a href="http://fabrice.bellard.free.fr/qemu/qemu-doc.html">The official documentation of the QEMU Project </a> </p>
		<p><a href="http://wiki2.archlinux.org/index.php/Qemu">Some content for QEMU for the sidux-manual was accessed off this site under GNU Free Documentation License 1.2 and modified for the sidux-manual</a> </p>

		
	</div>
	<div class="spacer05"></div>
</div>
</div>
</body>
</html>
